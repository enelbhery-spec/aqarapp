{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User Profile",
      "type": "object",
      "description": "Represents a user's profile in the system.",
      "properties": {
        "uid": { "type": "string", "description": "The unique identifier for the user, matching the Firebase Auth UID." },
        "email": { "type": "string", "format": "email", "description": "The user's email address." },
        "displayName": { "type": "string", "description": "The user's display name." },
        "createdAt": { "type": "string", "format": "date-time", "description": "Timestamp of when the user account was created." },
        "photoURL": { "type": "string", "format": "uri", "description": "URL of the user's profile picture." },
        "role": {
          "type": "string",
          "description": "The role of the user.",
          "enum": ["user", "admin", "super-admin"]
        }
      },
      "required": ["uid", "email", "createdAt", "role"]
    },
    "BlogPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Blog Post",
      "type": "object",
      "description": "Represents a blog post or article.",
      "properties": {
        "id": { "type": "string", "description": "Unique identifier for the blog post." },
        "slug": { "type": "string", "description": "URL-friendly slug for the blog post." },
        "title": { "type": "string", "description": "The title of the blog post." },
        "content": { "type": "string", "description": "The full content of the blog post in HTML or Markdown." },
        "excerpt": { "type": "string", "description": "A short summary or excerpt of the post." },
        "imageUrl": { "type": "string", "format": "uri", "description": "URL for the main image of the post." },
        "authorName": { "type": "string", "description": "Name of the post's author." },
        "authorId": { "type": "string", "description": "The UID of the user who wrote the post." },
        "category": { "type": "string", "description": "The category of the blog post." },
        "publishedAt": { "type": "string", "format": "date-time", "description": "Timestamp of when the post was published." },
        "isPublished": { "type": "boolean", "description": "Whether the blog post is visible to the public." }
      },
      "required": ["id", "slug", "title", "content", "authorId", "publishedAt", "isPublished"]
    },
    "Property": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Property",
      "type": "object",
      "description": "Represents a real estate property listing.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the property."
        },
        "title": {
          "type": "string",
          "description": "The title of the property listing."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the property."
        },
        "propertyType": {
          "type": "string",
          "enum": ["apartment", "villa", "land", "shop"],
          "description": "Type of the property."
        },
        "status": {
          "type": "string",
          "enum": ["للبيع", "للإيجار"],
          "description": "The listing status, either for sale or for rent."
        },
        "price": {
          "type": "number",
          "description": "Price of the property."
        },
        "location": {
          "type": "string",
          "description": "Location of the property."
        },
        "bedrooms": {
          "type": "number",
          "description": "Number of bedrooms."
        },
        "bathrooms": {
          "type": "number",
          "description": "Number of bathrooms."
        },
        "area": {
          "type": "number",
          "description": "Area in square meters."
        },
        "floor": {
            "type": "number",
            "description": "The floor number of the property."
        },
        "phone": {
            "type": "string",
            "description": "Contact phone number for the listing."
        },
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
                "src": { "type": "string", "format": "uri" },
                "hint": { "type": "string" }
            },
            "required": ["src"]
          },
          "description": "List of image URLs for the property."
        },
        "ownerId": {
            "type": "string",
            "description": "The UID of the user who owns this property."
        },
        "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the property was created."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "propertyType",
        "status",
        "price",
        "location",
        "bedrooms",
        "bathrooms",
        "area",
        "phone",
        "ownerId",
        "createdAt"
      ]
    },
    "Testimonial": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Testimonial",
      "type": "object",
      "description": "Represents a customer testimonial.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the testimonial."
        },
        "customerName": {
          "type": "string",
          "description": "Name of the customer providing the testimonial."
        },
        "customerLogo": {
          "type": "string",
          "description": "URL of the customer's company logo.",
          "format": "uri"
        },
        "quote": {
          "type": "string",
          "description": "The testimonial quote."
        }
      },
      "required": [
        "id",
        "customerName",
        "customerLogo",
        "quote"
      ]
    },
    "Headline": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Headline",
      "type": "object",
      "description": "Represents a headline variation for the landing page.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the headline."
        },
        "text": {
          "type": "string",
          "description": "The text of the headline."
        },
        "segment": {
          "type": "string",
          "description": "User segment the headline is targeted towards."
        },
        "clicks": {
          "type": "number",
          "description": "Number of clicks the headline received during A/B testing."
        }
      },
      "required": [
        "id",
        "text",
        "segment",
        "clicks"
      ]
    },
    "SiteContent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Site Content",
      "type": "object",
      "description": "Represents editable content on the website.",
      "properties": {
        "heroBackgroundImageUrl": {
          "type": "string",
          "format": "uri",
          "description": "URL for the hero section background image."
        }
      }
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ],
    "customClaims": {
      "role": {
        "type": "string",
        "enum": ["user", "admin", "super-admin"],
        "description": "Defines the user's role in the application."
      }
    }
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": { "$ref": "#/backend/entities/UserProfile" },
          "description": "Stores public user profile information.",
           "params": [
            { "name": "userId", "description": "The user's unique ID." }
          ]
        }
      },
      {
        "path": "/blog/{blogId}",
        "definition": {
          "entityName": "BlogPost",
          "schema": {
            "$ref": "#/backend/entities/BlogPost"
          },
          "description": "Stores blog posts for the site's blog section.",
          "params": [
            { "name": "blogId", "description": "Unique identifier for the blog post." }
          ]
        }
      },
      {
        "path": "/properties/{propertyId}",
        "definition": {
          "entityName": "Property",
          "schema": {
            "$ref": "#/backend/entities/Property"
          },
          "description": "Stores property information for display on the landing page.",
          "params": [
            {
              "name": "propertyId",
              "description": "Unique identifier for the property."
            }
          ]
        }
      },
      {
        "path": "/testimonials/{testimonialId}",
        "definition": {
          "entityName": "Testimonial",
          "schema": {
            "$ref": "#/backend/entities/Testimonial"
          },
          "description": "Stores customer testimonials with customer names, logos, and quotes for social proof.",
          "params": [
            {
              "name": "testimonialId",
              "description": "Unique identifier for the testimonial."
            }
          ]
        }
      },
      {
        "path": "/headlines/{headlineId}",
        "definition": {
          "entityName": "Headline",
          "schema": {
            "$ref": "#/backend/entities/Headline"
          },
          "description": "Stores headline variations for A/B testing and personalization based on user segments.",
          "params": [
            {
              "name": "headlineId",
              "description": "Unique identifier for the headline."
            }
          ]
        }
      },
      {
        "path": "/siteContent/heroSection",
        "definition": {
          "entityName": "SiteContent",
          "schema": {
            "$ref": "#/backend/entities/SiteContent"
          },
          "description": "Stores dynamic content for the site, such as image URLs."
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the landing page requirements, focusing on displaying properties, testimonials, and personalized headlines. A 'siteContent' collection is added to manage dynamic content like images for admins. The design prioritizes clarity and efficient data retrieval for UI rendering.  Authorization is handled via custom claims for admin roles.\n\n**Authorization Independence:**\nSince the data is mostly public, authorization independence is less critical. However, if we were to implement access control, the appropriate fields would be denormalized into subcollections as necessary. The admin role allows specific users to bypass normal user flows.\n\n**QAPs (Rules are not Filters):**\nThe data is structured in separate collections for properties, testimonials, and headlines. This allows us to query for each type of content efficiently without filtering based on different document types within a single collection. The `headlines` collection is structured to efficiently retrieve headlines by segment.\n\nSpecifically, here's how each entity is handled:\n\n*   `/properties`: Stores property information.\n*   `/testimonials`: Stores customer testimonials.\n*   `/headlines`: Stores headline variations for A/B testing and personalization.\n*   `/siteContent`: Stores general, editable site content like image URLs for specific sections."
  }
}

    